// <auto-generated />
using System;
using AmazeCareAPI.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmazeCareAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250810111821_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmazeCareAPI.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentID")
                        .HasName("PK_AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.HasIndex("StatusID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.AppointmentStatusMaster", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID")
                        .HasName("PK_AppointmentStatus_StatusID");

                    b.ToTable("AppointmentStatuses");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusName = "Scheduled"
                        },
                        new
                        {
                            StatusID = 3,
                            StatusName = "Completed"
                        },
                        new
                        {
                            StatusID = 4,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            StatusID = 5,
                            StatusName = "Rejected"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Billing", b =>
                {
                    b.Property<int>("BillingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillingID")
                        .HasName("PK_Billing");

                    b.HasIndex("AppointmentID")
                        .IsUnique();

                    b.HasIndex("PatientID");

                    b.HasIndex("StatusID");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.BillingStatusMaster", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID")
                        .HasName("PK_BillingStatusMaster_StatusID");

                    b.ToTable("BillingStatuses");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusName = "Paid"
                        },
                        new
                        {
                            StatusID = 3,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            StatusID = 4,
                            StatusName = "Refunded"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationID")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DoctorID")
                        .HasName("PK_DoctorID");

                    b.HasIndex("QualificationID");

                    b.HasIndex("SpecializationID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.DoctorStatusMaster", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID")
                        .HasName("PK_DoctorStatus");

                    b.ToTable("DoctorStatuses");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusName = "Active"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusName = "Inactive"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.DosagePatternMaster", b =>
                {
                    b.Property<int>("PatternID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatternID"));

                    b.Property<string>("PatternCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatternID")
                        .HasName("PK_DosagePatternMaster");

                    b.ToTable("DosagePatterns");

                    b.HasData(
                        new
                        {
                            PatternID = 1,
                            PatternCode = "1-0-0",
                            Timing = "BF"
                        },
                        new
                        {
                            PatternID = 2,
                            PatternCode = "0-1-0",
                            Timing = "AF"
                        },
                        new
                        {
                            PatternID = 3,
                            PatternCode = "0-0-1",
                            Timing = "BF"
                        },
                        new
                        {
                            PatternID = 4,
                            PatternCode = "1-1-0",
                            Timing = "AF"
                        },
                        new
                        {
                            PatternID = 5,
                            PatternCode = "1-1-1",
                            Timing = "AF"
                        },
                        new
                        {
                            PatternID = 6,
                            PatternCode = "0-1-1",
                            Timing = "BF"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.GenderMaster", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderID"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderID")
                        .HasName("PK_GenderMaster");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderID = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderID = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            GenderID = 3,
                            GenderName = "Other"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalExamination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordID")
                        .HasName("PK_MedicalRecord");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.MedicineMaster", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineID"));

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicineID")
                        .HasName("PK_MedicineMaster");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientID")
                        .HasName("PK_PatientID");

                    b.HasIndex("GenderID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.PatientStatusMaster", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID")
                        .HasName("PK_PatientStatus");

                    b.ToTable("PatientStatuses");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusName = "Active"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusName = "Deactivated"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int>("MedicineID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatternID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrescribedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionID")
                        .HasName("PK_Prescription");

                    b.HasIndex("MedicineID");

                    b.HasIndex("PatternID");

                    b.HasIndex("RecordID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.QualificationMaster", b =>
                {
                    b.Property<int>("QualificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QualificationID"));

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualificationID")
                        .HasName("PK_QualificationMaster");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.RecommendedTest", b =>
                {
                    b.Property<int>("RecommendedTestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecommendedTestID"));

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("RecommendedTestID")
                        .HasName("PK_RecommendedTest");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("TestID");

                    b.ToTable("RecommendedTests");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.RoleMaster", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID")
                        .HasName("PK_RoleMaster");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "Patient"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.SpecializationMaster", b =>
                {
                    b.Property<int>("SpecializationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecializationID"));

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecializationID")
                        .HasName("PK_SpecializationMaster");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.TestMaster", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"));

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID")
                        .HasName("PK_TestMaster");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName")
                        .HasName("PK_User_Username");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserName = "admin",
                            CreatedAt = new DateTime(2025, 8, 10, 16, 48, 17, 80, DateTimeKind.Local).AddTicks(647),
                            Email = "admin@amazecare.com",
                            HashKey = new byte[] { 45, 140, 84, 211, 15, 90, 158, 153, 246, 102, 252, 77, 44, 12, 129, 220, 91, 63, 224, 141, 23, 110, 186, 100, 209, 12, 221, 33, 197, 13, 216, 206, 19, 184, 250, 126, 24, 13, 36, 227, 22, 218, 162, 129, 25, 254, 77, 210, 253, 55, 128, 220, 123, 0, 19, 134, 212, 169, 122, 74, 195, 189, 195, 22 },
                            Password = new byte[] { 61, 133, 37, 171, 20, 58, 9, 164, 217, 142, 79, 174, 233, 152, 183, 93, 95, 74, 64, 44, 90, 201, 178, 46, 233, 59, 0, 242, 107, 50, 82, 212 },
                            RoleID = 1,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Appointment", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Doctor");

                    b.HasOne("AmazeCareAPI.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Patient");

                    b.HasOne("AmazeCareAPI.Models.AppointmentStatusMaster", "Status")
                        .WithMany("Appointments")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Billing", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.Appointment", "Appointment")
                        .WithOne("Billing")
                        .HasForeignKey("AmazeCareAPI.Models.Billing", "AppointmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Billing_Appointment");

                    b.HasOne("AmazeCareAPI.Models.Patient", "Patient")
                        .WithMany("Billings")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Billing_Patient");

                    b.HasOne("AmazeCareAPI.Models.BillingStatusMaster", "BillingStatus")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Billing_BillingStatus");

                    b.Navigation("Appointment");

                    b.Navigation("BillingStatus");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Doctor", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.QualificationMaster", "Qualification")
                        .WithMany("Doctors")
                        .HasForeignKey("QualificationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_Qualification");

                    b.HasOne("AmazeCareAPI.Models.SpecializationMaster", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_Specialization");

                    b.HasOne("AmazeCareAPI.Models.DoctorStatusMaster", "Status")
                        .WithMany("Doctors")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_Status");

                    b.HasOne("AmazeCareAPI.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("AmazeCareAPI.Models.Doctor", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_User");

                    b.Navigation("Qualification");

                    b.Navigation("Specialization");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.MedicalRecord", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecord_Appointment");

                    b.HasOne("AmazeCareAPI.Models.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecord_Doctor");

                    b.HasOne("AmazeCareAPI.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecord_Patient");

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Patient", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.GenderMaster", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazeCareAPI.Models.PatientStatusMaster", "Status")
                        .WithMany("Patients")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Patient_Status");

                    b.HasOne("AmazeCareAPI.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("AmazeCareAPI.Models.Patient", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Patient_User");

                    b.Navigation("Gender");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Prescription", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.MedicineMaster", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Prescription_Medicine");

                    b.HasOne("AmazeCareAPI.Models.DosagePatternMaster", "DosagePattern")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatternID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Prescription_DosagePattern");

                    b.HasOne("AmazeCareAPI.Models.MedicalRecord", "Record")
                        .WithMany("Prescriptions")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prescription_Record");

                    b.Navigation("DosagePattern");

                    b.Navigation("Medicine");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.RecommendedTest", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.Prescription", "Prescription")
                        .WithMany("RecommendedTests")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecommendedTest_Prescription");

                    b.HasOne("AmazeCareAPI.Models.TestMaster", "Test")
                        .WithMany()
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RecommendedTest_Test");

                    b.Navigation("Prescription");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.User", b =>
                {
                    b.HasOne("AmazeCareAPI.Models.RoleMaster", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Appointment", b =>
                {
                    b.Navigation("Billing");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.AppointmentStatusMaster", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.DoctorStatusMaster", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.DosagePatternMaster", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.GenderMaster", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.MedicalRecord", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.MedicineMaster", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Billings");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.PatientStatusMaster", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.Prescription", b =>
                {
                    b.Navigation("RecommendedTests");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.QualificationMaster", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.RoleMaster", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.SpecializationMaster", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("AmazeCareAPI.Models.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
